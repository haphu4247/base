def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def flutterMinSdkVersion = localProperties.getProperty('flutter.minSdkVersion')
if (flutterMinSdkVersion == null) {
    flutterMinSdkVersion = '20'
}

def flutterTargetSdkVersion = localProperties.getProperty('flutter.targetSdkVersion')
if (flutterTargetSdkVersion == null) {
    flutterTargetSdkVersion = '33'
}

def flutterCompileSdkVersion = localProperties.getProperty('flutter.compileSdkVersion')
if (flutterCompileSdkVersion == null) {
    flutterCompileSdkVersion = '33'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
//apply plugin: 'kotlin-android-extensions'

android {
    // ----- BEGIN flavorDimensions (autogenerated by flutter_flavorizr) -----
    flavorDimensions "flavor-type"
    signingConfigs {
        release {
            keyAlias 'base'
            keyPassword 'base123Release'
            storeFile file('../keystores/base_release.keystore')
            storePassword 'base123Release'

        }
        releaseStg {
            keyAlias 'base'
            keyPassword 'base123ReleaseStg'
            storeFile file('../keystores/base_stg.keystore')
            storePassword 'base123ReleaseStg'
        }
        releaseDev {
            keyAlias 'base'
            keyPassword 'base123ReleaseDev'
            storeFile file('../keystores/base_dev.keystore')
            storePassword 'base123ReleaseDev'
        }
        debug {
             keyAlias 'base'
             keyPassword 'base123Debug'
             storeFile file('../keystores/base_debug.keystore')
             storePassword 'base123Debug'
        }
    }

    productFlavors {
        dev {
            dimension "flavor-type"
            applicationId "com.phuhp.base.base.dev"
            resValue "string", "app_name", "My Base App Dev"
            signingConfig signingConfigs.debug
        }
        staging {
            dimension "flavor-type"
            applicationId "com.phuhp.base.base.staging"
            resValue "string", "app_name", "My Base App Staging"
            signingConfig signingConfigs.releaseStg
        }
        prod {
            dimension "flavor-type"
            applicationId "com.phuhp.base.base.free"
            resValue "string", "app_name", "My Base App"
            signingConfig signingConfigs.release
        }
    }
    // ----- END flavorDimensions (autogenerated by flutter_flavorizr) -----

   compileSdkVersion flutterCompileSdkVersion.toInteger()

   defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        // applicationId "com.phuhp.base.base"
        minSdkVersion flutterMinSdkVersion.toInteger()
        targetSdkVersion flutterTargetSdkVersion.toInteger()
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
